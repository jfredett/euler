> module P2.P2 where

===============================================================================
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not exceed
one million.
===============================================================================

Well, Lets start by defining the fibonacci sequence,

> fibonacci :: [Integer]
> fibonacci = 0 : 1 : zipWith (+) fibonacci (drop 1 fibonacci)

Now that thats out of the way, we just need to select all those fibonacci
numbers that are even and less than 1,000,000. So lets define a predicate.

> --It's a little wordy, but it makes things nice and clear.
> fibPred :: Integer -> Bool
> fibPred x
>    | even x && x < 1000000       = True
>    | otherwise                   = False

Now we just use Haskell's Lisp Comprehension's to create a list of the even
fibonacci numbers. Note that we'll use take to avoid total infinite list
comprehension. Convince yourself this is okay.

> fibEvens :: [Integer]
> fibEvens = [n | n <- take 1000 fibonacci, fibPred n]

Now lets take the sum of the thing

> solvetwo :: Integer
> solvetwo = foldr (+) 0 fibEvens

