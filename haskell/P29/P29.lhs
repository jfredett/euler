> module P29 where

===============================================================================
Consider all integer combinations of ab for 2 <= a<= 5 and <= b <= 5:

    22=4, 23=8, 24=16, 25=32
    32=9, 33=27, 34=81, 35=243
    42=16, 43=64, 44=256, 45=1024
    52=25, 53=125, 54=625, 55=3125

If they are then placed in numerical order, with any repeats removed, we get the
following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 
2 <= b <= 100?
===============================================================================

This is easy enough to compute directly, we'll use Data.Set for efficient calculation
and to help remove duplicate elements.

> import Data.Set (Set, fromList, fromDistinctAscList, union, size)
> import qualified Data.Set as S
> import PELib.PELib ((><))

> construct :: Set Integer
> construct = constructWithBounds as as
>	where as = fromDistinctAscList [2..100]

> constructWithBounds :: Set Integer -> Set Integer -> Set Integer
> constructWithBounds as bs = S.map (uncurry (^)) 
>			    $ (as >< bs)	

So Solve 29 is just:

> solvetwentynine = size construct







